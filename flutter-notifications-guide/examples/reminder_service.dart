// reminder_service.dart
// Service ƒë·ªÉ qu·∫£n l√Ω c√°c lo·∫°i reminder kh√°c nhau

import 'notification_service.dart';

class ReminderService {
  static final NotificationService _notificationService = NotificationService();
  
  /// Reminder IDs
  static const int _waterReminderId = 1;
  static const int _workoutReminderId = 2;
  static const int _breakReminderId = 3;
  static const int _sleepReminderId = 4;
  static const int _medicineReminderId = 5;

  /// Schedule water reminder every 2 hours
  static Future<void> scheduleWaterReminder() async {
    await _notificationService.scheduleRepeatingNotification(
      id: _waterReminderId,
      title: 'üíß U·ªëng n∆∞·ªõc n√†o!',
      body: 'ƒê√£ 2 gi·ªù r·ªìi, nh·ªõ u·ªëng n∆∞·ªõc ƒë·ªÉ kh·ªèe m·∫°nh nh√©!',
      interval: RepeatInterval.everyMinute, // Demo - th·ª±c t·∫ø c√≥ th·ªÉ d√πng custom interval
    );
  }

  /// Schedule workout reminder at specific time
  static Future<void> scheduleWorkoutReminder({
    required int hour,
    required int minute,
  }) async {
    await _notificationService.scheduleDailyNotification(
      id: _workoutReminderId,
      title: 'üèÉ‚Äç‚ôÇÔ∏è Workout Time!',
      body: 'ƒê√£ ƒë·∫øn gi·ªù t·∫≠p th·ªÉ d·ª•c. H√£y b·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi nƒÉng l∆∞·ª£ng!',
      time: TimeOfDay(hour: hour, minute: minute),
    );
  }

  /// Schedule break reminder every hour
  static Future<void> scheduleBreakReminder() async {
    await _notificationService.scheduleRepeatingNotification(
      id: _breakReminderId,
      title: '‚òï Break Time!',
      body: 'ƒê√£ l√†m vi·ªác 1 gi·ªù r·ªìi, h√£y ngh·ªâ gi·∫£i lao 5 ph√∫t nh√©!',
      interval: RepeatInterval.hourly,
    );
  }

  /// Schedule sleep reminder
  static Future<void> scheduleSleepReminder({
    required int hour,
    required int minute,
  }) async {
    await _notificationService.scheduleDailyNotification(
      id: _sleepReminderId,
      title: 'üò¥ Bedtime!',
      body: 'ƒê√£ ƒë·∫øn gi·ªù ng·ªß. H√£y chu·∫©n b·ªã ƒë·ªÉ c√≥ m·ªôt gi·∫•c ng·ªß ngon!',
      time: TimeOfDay(hour: hour, minute: minute),
    );
  }

  /// Schedule medicine reminder
  static Future<void> scheduleMedicineReminder({
    required String medicineName,
    required int hour,
    required int minute,
  }) async {
    await _notificationService.scheduleDailyNotification(
      id: _medicineReminderId,
      title: 'üíä U·ªëng thu·ªëc',
      body: 'ƒê√£ ƒë·∫øn gi·ªù u·ªëng $medicineName. ƒê·ª´ng qu√™n nh√©!',
      time: TimeOfDay(hour: hour, minute: minute),
    );
  }

  /// Cancel water reminder
  static Future<void> cancelWaterReminder() async {
    await _notificationService.cancelNotification(_waterReminderId);
  }

  /// Cancel workout reminder
  static Future<void> cancelWorkoutReminder() async {
    await _notificationService.cancelNotification(_workoutReminderId);
  }

  /// Cancel break reminder
  static Future<void> cancelBreakReminder() async {
    await _notificationService.cancelNotification(_breakReminderId);
  }

  /// Cancel sleep reminder
  static Future<void> cancelSleepReminder() async {
    await _notificationService.cancelNotification(_sleepReminderId);
  }

  /// Cancel medicine reminder
  static Future<void> cancelMedicineReminder() async {
    await _notificationService.cancelNotification(_medicineReminderId);
  }

  /// Cancel all reminders
  static Future<void> cancelAllReminders() async {
    await _notificationService.cancelNotification(_waterReminderId);
    await _notificationService.cancelNotification(_workoutReminderId);
    await _notificationService.cancelNotification(_breakReminderId);
    await _notificationService.cancelNotification(_sleepReminderId);
    await _notificationService.cancelNotification(_medicineReminderId);
  }

  /// Get all active reminders
  static Future<List<String>> getActiveReminders() async {
    final pending = await _notificationService.getPendingNotifications();
    final activeReminders = <String>[];

    for (final notification in pending) {
      switch (notification.id) {
        case _waterReminderId:
          activeReminders.add('Water Reminder');
          break;
        case _workoutReminderId:
          activeReminders.add('Workout Reminder');
          break;
        case _breakReminderId:
          activeReminders.add('Break Reminder');
          break;
        case _sleepReminderId:
          activeReminders.add('Sleep Reminder');
          break;
        case _medicineReminderId:
          activeReminders.add('Medicine Reminder');
          break;
      }
    }

    return activeReminders;
  }

  /// Test immediate notification
  static Future<void> testReminderNotification() async {
    await _notificationService.showInstantNotification(
      title: 'üß™ Test Reminder',
      body: 'ƒê√¢y l√† notification test ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng!',
    );
  }
}

// Helper class for different reminder types
class ReminderType {
  final int id;
  final String name;
  final String icon;
  final String defaultTitle;
  final String defaultBody;

  const ReminderType({
    required this.id,
    required this.name,
    required this.icon,
    required this.defaultTitle,
    required this.defaultBody,
  });

  static const water = ReminderType(
    id: 1,
    name: 'Water',
    icon: 'üíß',
    defaultTitle: 'U·ªëng n∆∞·ªõc n√†o!',
    defaultBody: 'ƒê√£ ƒë·∫øn gi·ªù u·ªëng n∆∞·ªõc ƒë·ªÉ kh·ªèe m·∫°nh!',
  );

  static const workout = ReminderType(
    id: 2,
    name: 'Workout',
    icon: 'üèÉ‚Äç‚ôÇÔ∏è',
    defaultTitle: 'Workout Time!',
    defaultBody: 'ƒê√£ ƒë·∫øn gi·ªù t·∫≠p th·ªÉ d·ª•c!',
  );

  static const break_ = ReminderType(
    id: 3,
    name: 'Break',
    icon: '‚òï',
    defaultTitle: 'Break Time!',
    defaultBody: 'H√£y ngh·ªâ gi·∫£i lao 5 ph√∫t!',
  );

  static const sleep = ReminderType(
    id: 4,
    name: 'Sleep',
    icon: 'üò¥',
    defaultTitle: 'Bedtime!',
    defaultBody: 'ƒê√£ ƒë·∫øn gi·ªù ng·ªß!',
  );

  static const medicine = ReminderType(
    id: 5,
    name: 'Medicine',
    icon: 'üíä',
    defaultTitle: 'U·ªëng thu·ªëc',
    defaultBody: 'ƒê·ª´ng qu√™n u·ªëng thu·ªëc!',
  );

  static const List<ReminderType> all = [
    water,
    workout,
    break_,
    sleep,
    medicine,
  ];
}
